/**
 * JavaScript for MaterialFAB Menu
 */
( function ( mw, $ ) {
    
    function loadMaterialFAB() {
        
		mw.loader.using(['oojs-ui']).then(function () {
		
			var $affectedResizeElements = $('*').not(".access-no-resize");
			var $affectedContrastElements = $('*').not("input, .access-no-contrast");			
			var $affectedImagesElements = $("img");
			var blackColor = "#000";
			var whiteColor = "#fff";
			
			// Storing the original color and background color in a data attribute so size can be reset			
			$affectedContrastElements.each( function(){
				var $this = $(this);
				$this.data("orig-color", $this.css("color"));
				$this.data("orig-back-color", $this.css("background-color"));
			});
			
			// Storing the original color in a data attribute so size can be reset
			$affectedImagesElements.each( function(){
				var $this = $(this);
				$this.data("orig-color", $this.css("color"));
				$this.data("orig-back-color", $this.css("background-color"));
			});
			
			
			// Storing the original size in a data attribute so size can be reset
			$affectedResizeElements.each( function(){
				var $this = $(this);
				$this.data("orig-size", $this.css("font-size"));
			});

			function changeFontSize(intSize){
				$affectedResizeElements.each( function(){
					var $this = $(this);				
					var currentSize =  parseInt($this.css('font-size')); 
					var newSize = currentSize + intSize;
					$this.css("font-size" , newSize);				
				});
			}
			
			function resetFontSize(){
				$affectedResizeElements.each( function(){
					var $this = $(this);					
					$this.css("font-size", $this.data("orig-size"));
				});
			}
			
			function resetContrastElements(){
				
				//iterate through every element
				$affectedImagesElements.each(function() {
					var $this = $(this);					
					$this.css("background-color", $this.data("orig-back-color"));
					$this.css("color", $this.data("orig-color"));
					$this.css('-webkit-filter', 'invert(0)');
					$this.css('-webkit-filter', 'grayscale(0)');
				});
				
				$affectedContrastElements.each( function() {
					var $this = $(this);
					
					if($this.css('background-image'))
					{
						$this.css('-webkit-filter', 'invert(0)');
						$this.css('-webkit-filter', 'grayscale(0)');
					}					
					$this.css("background-color", $this.data("orig-back-color"));
					$this.css("color", $this.data("orig-color"));
				});
			}
		
			function changeContrastRGBElements() {

				//set up color properties to iterate through
				var colorProperties = ['color', 'background-color', 'background-image'];

				//iterate through every element in reverse order...
				$affectedContrastElements.each(function() {
					var color = null;
					var $this = $(this);
					
					for (var prop in colorProperties) {
						prop = colorProperties[prop];
						
						//if we can't find this property or it's null, continue
						if (!$this.css(prop)) continue; 
						
						if(prop === "background-image")
						{
							$this.css('-webkit-filter', 'invert(1)');
						}
						else {	
							//create RGBColor object
							color = new RGBColor($this.css(prop));

							if (color.ok) { 
								$this.css(prop, 'rgb(' + (255 - color.r) + ', ' 
													   + (255 - color.g) + ', ' 
													   + (255 - color.b) + ')');
							}
						}
						color = null; //some cleanup
					}
				});
				//iterate through every element
				$affectedImagesElements.each(function() {
					var $this = $(this);
					$this.css('-webkit-filter', 'invert(1)');
					$this.css('background-color', whiteColor);
					$this.css('color', blackColor);
				});
			}	
			
			function changeColorBlackAndWhite() {

				//iterate through every element in order...
				$affectedContrastElements.each(function() {
					var $this = $(this);
					
					if($this.css('background-image'))
					{
						$this.css('-webkit-filter', 'grayscale(1)');
					}
					else {
						
						//if we can't find this color property or it's null, continue
						if ($this.css('color')) {
							$this.css('color', whiteColor);
						}

						
						//if we can't find this background color property or it's null, continue
						if ($this.css('background-color')) {
							$this.css('background-color', blackColor);
						}
					}
				});
								
				//iterate through every element
				$affectedImagesElements.each(function() {
					var $this = $(this);
					$this.css('-webkit-filter', 'grayscale(1)');					
					$this.css('background-color', whiteColor);
					$this.css('color', blackColor);
				});
			}
			
			//////////////////////////////////////////////////////////////////////////////////////////////	
			
			var contrast_toggle = new OO.ui.ToggleButtonWidget( {
				label: "◐",				
				//icon: 'halfBright',
				//title: mw.msg( 'contrast-toggle-popup-text' )
				id: "contrast-toggle",               
				classes: ['ui-accessibility-button', 'access-no-resize', 'access-no-contrast']             
			});

			var contrast_RGB_toggle = new OO.ui.ToggleButtonWidget( {				
				label: "◪",
				id: "contrast-rgb-toggle",               
				classes: ['ui-accessibility-button', 'access-no-resize', 'access-no-contrast']              
			});
			
			contrast_toggle.on('click', function () {
				if(contrast_toggle.getValue()){
					contrast_RGB_toggle.setValue(false);
					resetContrastElements();
					changeColorBlackAndWhite();					
				}
				else {
					resetContrastElements();
				}				
			});

			contrast_RGB_toggle.on('click', function () {
				if(contrast_RGB_toggle.getValue()){
					contrast_toggle.setValue(false);
					resetContrastElements();
					changeContrastRGBElements();
				}
				else {
					resetContrastElements();
				}
			});
			
			var larger_font_size_toggle = new OO.ui.ToggleButtonWidget( {
				label: "A+",
				//icon: 'bigger',
				//title: mw.msg( 'larger-text-toggle-popup-text' ),
				id: "larger-font-toggle",
				classes: ['ui-accessibility-button', 'access-no-resize', 'access-no-contrast']
			});
			
			larger_font_size_toggle.on('click', function () {
				changeFontSize(2);
			});
			
			var smaller_font_size_toggle = new OO.ui.ButtonWidget( {
				label: "A−",
				//icon: 'smaller',
				//title: mw.msg( 'smaller-text-toggle-popup-text' )
				id: "smaller-font-toggle",
				classes: ['ui-accessibility-button', 'access-no-resize', 'access-no-contrast']
			});
			
			smaller_font_size_toggle.on('click', function () {
				changeFontSize(-2);
			});

			var reset_toggle = new OO.ui.ButtonWidget( {
				label: "↻",
				id: "reset-toggle",
				classes: ['ui-accessibility-button', 'access-no-resize', 'access-no-contrast']
			});
			
			reset_toggle.on('click', function () {
				resetContrastElements();
				resetFontSize();								
			});
			
			var buttons_group = new OO.ui.ButtonGroupWidget( {
				id: "mw-accessibility-menu",
				items: [contrast_toggle,
						contrast_RGB_toggle,
						larger_font_size_toggle,
						smaller_font_size_toggle,
						reset_toggle],
				classes: ['fixed-action-btn horizontal','access-no-resize', 'access-no-contrast']						
			});
				
			$('#content').append( buttons_group.$element);
        });
    }
    
    $( function () {
        loadMaterialFAB();
    });

}( mediaWiki, jQuery ) );
